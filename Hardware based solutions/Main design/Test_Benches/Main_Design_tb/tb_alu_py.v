/*
An intensive testbench for the ALU module
	+ Random sequences are generated by the Python script 
	+ A high level model written in python is used as the golden model for testing
	+ The results of both UUT and the python model are compared [from the python script side] and a plot is shown
	+ The parameter <num_test_cases> is used to control the number of the testcases both from the script and from the hdl file 
	+ The tb is invoked from the python script

Helper modules used
	+ CLK_GEN : for driving the clock
*/
`include "definitions.v"
//`ifdef iverilog_comp
//`include "rtl/computation/ALU32_NP.v"
//`endif

module CLK_GEN #(
	parameter CLK_PERIOD = 10 )
(
	output reg clk
);
initial begin
	clk<=0;
	forever #(CLK_PERIOD/2) clk<=~clk;
end
endmodule



module tb_alu_py;

localparam CLK_PERIOD = 10;
localparam BIT_WIDTH = 32;
localparam EXTRA_BITS = 2;
localparam num_test_cases = 100;

wire clk;
reg rst;
reg acc_en; 
wire [BIT_WIDTH + EXTRA_BITS - 1:0] acc_result;


// x = 0
reg [BIT_WIDTH + EXTRA_BITS - 1:0] x = {2'b01, 32'h0};

// w = 0
reg [BIT_WIDTH + EXTRA_BITS - 1:0] w = {2'b01, 32'h0};

// 32*2 floats + 2*2 extra bits + 1 acc_clear
reg [68:0] test_vector_mem [0:num_test_cases-1];
reg [BIT_WIDTH-1:0] test_results [0:num_test_cases];
integer test_case = 0;
integer result_file;

CLK_GEN clk_generator(
	.clk(clk)
);

ALU #(.BIT_WIDTH(BIT_WIDTH), .EXTRA_BITS(EXTRA_BITS)) UUT(
	.WEIGHT_SCALER(w),
	.INPUT_SCALER(x),
	.CLK(clk), 
	.ACC_EN(acc_en),
	.RESET(rst),
	.ACC_RESULT(acc_result)
);

function real convert;
	input integer float_in;
	integer i;
	real cvt;
	begin
		convert = 0;
		for (i = 22; i> 0; i=i-1) begin
			convert = convert + float_in[i]*((2.0)**-(23-i));
		end
		convert = (1+convert)*((2.0)**(float_in[30:23]-127));
	end
	endfunction

initial begin
	// dump the signals for the wave viewer
	$dumpfile("tb/computation/py_scripts/testing.dump");
	$dumpvars;
	// for small simultion 
	//$monitor("Weight: %h, Input: %h, ALU out: %h, ACC_EN: %b", w[31:0], x[31:0], acc_result[31:0], acc_en);
	// read the test vector file
	$readmemb("test_vector.txt", test_vector_mem);
	// file_id for the test results
	result_file = $fopen("test_results.txt", "w");

  // some random initial state
  #1 rst<=1'bx;
  // weight for some CLK_CYCLES; then reset the accumultor
  #(CLK_PERIOD*3) rst<=1; acc_en = 0;
  for (test_case = 0;test_case<num_test_cases ;test_case=test_case+1) begin
		#(CLK_PERIOD) 
		rst <= 0; acc_en <= test_vector_mem[test_case][0]; 
		w[31:0] = test_vector_mem[test_case][66:35]; x[31:0] = test_vector_mem[test_case][32:1];

		test_results[test_case] = acc_result[31:0];
	end
	#(CLK_PERIOD)
	test_results[test_case] = acc_result[31:0];

	for (test_case=0; test_case<num_test_cases; test_case=test_case+1) begin
		$fwrite(result_file, "%b\n", test_results[test_case]);
	end

	$finish;
end

endmodule

